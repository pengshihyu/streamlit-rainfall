# -*- coding: utf-8 -*-
"""Week_14_Yilan_Rainfall.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TEBYeIVaZgVjMf0OpPEnis3gWNguhX-L

Rain on my Shoulder
---
To tackle climate change by analyzing Rain falling in Taiwan, Tao-Yuan. 

1. [政府資料開放平台](https://data.gov.tw/dataset/130309), 1960-2017年全臺各縣市雨量網格月平均資料

!pip install -U plotnine mizani numerize pandas
"""

!pip install numerize

!pip install -U plotnine mizani numerize pandas



# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
from plotnine import *

from mizani.formatters import date_format
from numerize import numerize

# %matplotlib inline

pd.__version__

# load data in code page 950
file="data/ObsRain_宜蘭縣.csv"
data = pd.read_csv(file, encoding="cp950")



data['DD']=1

data['Datetime'] = pd.to_datetime(data[['YY', 'MM', 'DD']].astype(str).apply('-'.join, axis=1), format='%Y-%m-%d')

data['RainValue'].fillna(0,inplace=True)
data['RainValue']=np.round(data['RainValue'].astype(float))
#data['RainValue']=data['RainValue'].astype(int)

"""data.index=data['Datetime']"""

data.info()

# reading the data set
data = pd.read_csv(file, parse_dates=['Datetime'], index_col='Datetime')

series = data['EKPC_MW']
series.name = 'Demand'

series_df = series.reset_index()

# Average daily energy demand
series_df['Day'] = series.index.strftime('%Y-%m-%d')
daily_mean = series.resample('D').mean()
daily_mean.index = daily_mean.index.strftime('%Y-%m-%d')
daily_mean.to_dict();

# Average monthly energy demand
series_df['MonthlyAvg'] = series.index.strftime('%Y-%m')
monthly_mean = series.resample('M').mean()
monthly_mean.index = monthly_mean.index.strftime('%Y-%m')
monthly_mean.to_dict();

series_df['MonthlyAvg'] = series_df['MonthlyAvg'].map(monthly_mean)
series_df['DailyAvg'] = series_df['Day'].map(daily_mean)
series_df['Hour'] = series.index.hour
series_df['Month'] = series.index.month
series_df['Year'] = series.index.year
series_df['MonthPeriod'] = series.index.to_period('M')
series_df['Week'] = series.index.to_period('W')
series_df['Monthname'] = series.index.month_name()
series_df['Dayname'] = series.index.day_name()
series_df['Dayname'] = pd.Categorical(series_df['Dayname'],
                                      categories=['Monday', 'Tuesday', 'Wednesday',
                                                  'Thursday', 'Friday', 'Saturday',
                                                  'Sunday'])

series_df['Monthname'] = pd.Categorical(series_df['Monthname'],
                                        categories=['January', 'February', 'March',
                                                    'April', 'May', 'June', 'July',
                                                    'August', 'September', 'October',
                                                    'November', 'December'])

data.info()

series_df=data[['Datetime','RainValue']]
series_df.head()

series_df.head()

rain_plot = ggplot(series_df[-48:]) + \
              aes(x='Datetime', y='RainValue') + \
              theme_classic(base_family='Palatino', base_size=12) + \
              theme(plot_margin=.125,
                    axis_text=element_text(size=11),
                    legend_title=element_blank(),
                    legend_position='top') + \
              geom_line(color='#541675') + \
              geom_line(mapping=aes(x='Datetime', y='RainValue'),
                        color='#f2c75b', size=1.3) 
       
rain_plot

# TIME SERIES PLOT
#theme_classic(base_family='Palatino', base_size=12) + \

rain_plot = ggplot(series_df[-48:]) + \
              aes(x='Datetime', y='RainValue') + \
              theme_classic(base_family='Palatino', base_size=12) + \
              theme(plot_margin=.125,
                    axis_text=element_text(size=11),
                    legend_title=element_blank(),
                    legend_position='top') + \
              geom_line(color='#541675') + \
              geom_line(mapping=aes(x='Datetime', y='RainValue'),
                        color='#f2c75b', size=1.3) + \
              xlab('') + \
              ylab('Rain Falling') + \
              theme(figure_size=(12, 6)) +\
              ggtitle('') + \
              scale_y_continuous(labels=lambda lst: [numerize.numerize(x)
                                                     for x in lst])
rain_plot



series_df.index=series_df['Datetime']
series_df['Month'] = list(series_df.index.month_name())

series_df.head()

# classify the feature into category
series_df['Month'] = pd.Categorical(series_df['Month'],
                                        categories=['January', 'February', 'March',
                                                    'April', 'May', 'June', 'July',
                                                    'August', 'September', 'October',
                                                    'November', 'December'])

# BOXPLOT ACROSS MONTH
monthly_distr_plot = \
    ggplot(series_df[-48:]) + \
    aes(x=0, y='RainValue') + \
    theme_bw(base_family='Georgia', base_size=12) + \
    theme(plot_margin=.125,
          axis_text_x=element_blank(),
          legend_title=element_blank(),
          strip_background_x=element_text(color='#f2c75b'),
          strip_text_x=element_text(size=11)) + \
    geom_boxplot() + \
    facet_grid('. ~Month') + \
    labs(x='', y='Rain Falling Distribution') + \
    theme(figure_size=(14, 8)) +\
    scale_y_continuous(labels=lambda lst: [numerize.numerize(x)
                                           for x in lst])
monthly_distr_plot

# SEASONAL SUB-SERIES PLOT
stat_by_group = series_df[-48:].groupby('Month')['RainValue'].mean()
stat_by_group = stat_by_group.reset_index()

seasonal_subseries_plot = \
    ggplot(series_df[-48:]) + \
    aes(x='Datetime',
        y='RainValue') + \
    theme_538(base_family='Georgia', base_size=12) + \
    theme(plot_margin=.125,
          axis_text_x=element_text(size=8, angle=90),
          legend_title=element_blank(),
          strip_background_x=element_text(color='#f2c75b'),
          strip_text_x=element_text(size=11)) + \
    geom_line() + \
    facet_grid('. ~Month') + \
    geom_hline(data=stat_by_group,
               mapping=aes(yintercept='RainValue'),
               colour='#f2c75b',
               size=2) + \
    theme(figure_size=(14, 8)) +\
    labs(x='', y='Rain Falling') + \
    scale_x_datetime(labels=date_format('%Y'))
seasonal_subseries_plot



